@page "/yt/download"

@using BlazorApp1.Models
@using BlazorApp1.Services
@inject YtDownloaderService YtDownloaderSrvc
@using System.Threading;

<h2>YtDownloader</h2>

<h4 class="InputStyle">Download new video</h4>
<div class="InputStyle">
    <EditForm Model="@video" OnValidSubmit="@DownloadVideo">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div style="display: block;">
            <p style="display:inline; margin: 10px">URL</p>
            <InputText id="url" @bind-Value="video.Url" @oninput="DownloadInfo" style="width: 700px"/>
        </div>

        <div style="display: block;">
            <p style="display:inline; margin: 10px">Resolution</p>
            <InputSelect id="resolutionSelect" @bind-Value="video.ResolutionChosen" style="min-width: 75px; display: inline; margin: 10px">
                @foreach (var res in video.Resolution.OrderByDescending(x => x))
                {
                    <option value=@res>@res</option>
                }
            </InputSelect>
        </div>

        <div style="display: block;">
            <p style="display: inline; margin: 10px">Bitrate</p>
            <InputSelect id="bitrateSelect" @bind-Value="video.BitRateChosen" style="min-width: 75px; display: inline; margin: 10px">
                @foreach (var bitrate in video.BitRate.OrderByDescending(x => x))
                {
                    <option value=@bitrate>@bitrate</option>
                }
            </InputSelect>
        </div>

        <div style="display: block;">
            <p style="display: inline; margin: 20px 10px">Progress</p>
            <progress id="downloadingProgressBar" value=@video.Progress max=100 style="display: inline;"></progress> 
            @if (video.TotalBytes < Math.Pow(2, 10))
            {
                <p style="display: inline; margin: 20px 10px">@(video.Progress)% (@video.DownloadedBytes KB | @video.TotalBytes KB)</p>
            }
            else
            {
                <p style="display: inline; margin: 20px 10px">@(video.Progress)% (@(video.DownloadedBytes/1024) MB | @(video.TotalBytes/1024) MB)</p>
            }
        </div>

        <div style="display: block;">
            <p style="display: inline; margin: 20px 10px">Status</p>

            @if (@video.Status)
            {
                <p style="display: inline; margin: 20px 10px">Downloaded </p>
            }
            else
            {
                <p style="display: inline; margin: 20px 10px">Not downloaded </p>
            }
        </div>
        <div style="display: block;">
            <button type="submit" class="btn btn-primary" style="display: inline; margin: 20px 10px">Submit</button>
        </div>

    </EditForm>
</div>


@code {
    private VideoInfoOwn video = new VideoInfoOwn();
    //private readonly object _locker = new object();

    public delegate void DelegateChangeProgressBar(long downloadedBytes, long totalBytes);

    private void DownloadInfo()
    {
        var ytVideo = new YtDownloaderService(video.Url);
        video.Resolution = ytVideo.Resolution;
        video.BitRate = ytVideo.BitRate;
        video.BitRateChosen = ytVideo.BitRate.First();
        video.ResolutionChosen = ytVideo.Resolution.First();
    }

    public void ChangeProgressBar(long downloadedBytes, long totalBytes)
    {
        float workDone = (int)(100 * Math.Round(((float)downloadedBytes / (float)totalBytes), 2));
        video.Progress = workDone;
        video.DownloadedBytes = downloadedBytes / 1024;
        video.TotalBytes = totalBytes / 1024;
        RefreshLayout();
    }

    private async void DownloadVideo2()
    {
        video.Status = false;
        var ytVideo = new YtDownloaderService(video.Url);
        DelegateChangeProgressBar handler = ChangeProgressBar;
        await ytVideo.DownloadVideo(video, handler);
        video.Status = true;
        RefreshLayout();
    }

    private void DownloadVideo()
    {
        var tt = new Thread(DownloadVideo2);
        tt.IsBackground = false;
        tt.Start();
    }

    private void RefreshLayout()
    {
        InvokeAsync(() => StateHasChanged());
    }


}
